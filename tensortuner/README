======================================================================
TensorTuner: Auto-tuning TensorFlow's Threading Model for CPU Backend
======================================================================

TensorTuner is a tool for automatic tuning of TensorFlow's threading model
(inter_op_parallelism_threads, intra_op_parallelism_threads, OMP_NUM_THREADS)
for CPU backends implemented using Eigen and Intel's MKL libraries.

------------
INSTALLATION
------------

TensorTuner's current implementation relies on Active Harmony
(http://www.dyninst.org/harmony) project. So we need to install Active Harmony
first.

Installing Active Harmony
-------------------------

1. Get the source code:

      $  git clone https://github.com/ActiveHarmony/harmony.git

2. Build (Active Harmony's Makefile can be referred for details.)

      $ cd harmony
      $ make install

3. Build check:

      $ export HARMONY_HOME=<ROOT>/harmony
      $ example/client_api/minimal

   ROOT points the directory containing harmony source code.
   Run should end up with message like (actual numbers may vary):
    (   1, 1.0000, "apples") = 645.000000 (* Best point found. *)

------------------
USING TENSORTUNER
------------------

To perform tuning for Eigen and MKL CPU backends, pls run the corresponding
scripts provided in the package. Before running the script, following variables
from the script needs to be set:
  - set LOG_DIR to the location where the tuning logs should be dumped,
  - set TF_CNN_DIR to the directory under private-tensorflow-benchmarks
    containing run_single_node_benchmark.py and tf_cnn_benchmark.py.
Also note the small change needed in benchmark_cnn.py

benchmark_cnn.py change
-----------------------

The tuning algorithm used by TensorTuner, Nelder-Mead Simplex algorithm, is a
function minimization algorithm. So the objective function needs to be provided
such that performance score 's' is smaller for higher images per second from
TF_CNN benchmarks. Since current benchmark_cnn emits images/sec, a change is
needed to emit seconds per images. This change is specified in
benchmark_cnn.diff.

With this change, the output of tf_cnn_benchmark.py should look like:

----------------------------------------------------------------
total images/sec: 92.83
----------------------------------------------------------------
10.77

Where the last number, 10.77, is seconds per images multiplied by 1000.
TensorTuner uses this number for tuning -- in other words, smaller the number,
better is the performance in images/sec.
